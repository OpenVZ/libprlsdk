<?xml version="1.0" encoding="UTF-8"?>
<!--W3C Schema generated by XMLSPY v5 rel. 4 U (http://www.xmlspy.com)-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
	<xs:element name="ChangeDateTime" type="xs:dateTime"/>
	<xs:element name="ChangedBy" type="xs:string"/>
	<xs:element name="DefaultVmFolder" type="xs:string"/>
	<xs:element name="IsPrivate" type="xs:integer" default="PVE::VmPublic">
		<xs:annotation>
			<xs:documentation>type=PVE::VmPrivateFlag;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="IsRegistered" type="xs:integer" default="PVE::VmUnregistered">
		<xs:annotation>
			<xs:documentation>method=Registered;type=PVE::VmRegisteredState;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="IsValid" type="xs:integer" default="PVE::VmNotValid">
		<xs:annotation>
			<xs:documentation>method=Valid;type=PVE::VmValidState;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="ParallelsVmDirectories">
		<xs:annotation>
			<xs:documentation>class=CVmDirectories;</xs:documentation>
			<xs:documentation source="getVmDirectoryByUuid">header_fragment:
	CVmDirectory*	getVmDirectoryByUuid( const QString&amp; uuid);
</xs:documentation>
			<xs:documentation source="getVmDirectoryByUuid_impl">unit_fragment:
CVmDirectory*	CVmDirectories::getVmDirectoryByUuid( const QString&amp; uuid)
{
	foreach ( CVmDirectory* p, m_lstVmDirectory )
	{
		if ( p-&gt;getUuid() ==  uuid )
			return p;
	}

	return 0;
}
</xs:documentation>
			<xs:documentation source="VmDirectory">header_fragment:
	// List of VM directory 
	QList&lt;CVmDirectory* &gt;* getVmDirectoriesList()
	{
		return &amp;m_lstVmDirectory;
	}

	// Add VM directory to the list
	void addVmDirectory(CVmDirectory* item); 
</xs:documentation>
			<xs:documentation source="VmDirectory_impl">unit_fragment:
void CVmDirectories::addVmDirectory(CVmDirectory* item)
{
	m_lstVmDirectory.append( item );
}

</xs:documentation>
			<xs:documentation source="FileName">header_fragment:
	// Get output file name
	QString getOutFileName() const;
	// Set catalogue file name
	void setCatalogueFileName(QString value);
	// Get catalogue file name
	QString getCatalogueFileName() const;
private:
    QString m_strFile;
public:
</xs:documentation>
			<xs:documentation source="FileName_impl">unit_fragment:
QString CVmDirectories::getOutFileName() const
{
    return m_qsFileName.isEmpty() ? m_strFile : m_qsFileName;
}

void CVmDirectories::setCatalogueFileName(QString value)
{
	m_strFile = value;

	if ( !m_qsFileName.isEmpty() )
		m_qsFileName = m_strFile;
}

QString CVmDirectories::getCatalogueFileName() const
{
	return m_strFile;
}
</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="ServerIdentification" type="ServerIdentificationType">
					<xs:annotation>
						<xs:documentation>method=VmServerIdentification;single_fixed=on;</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="CommonLockedOperations">
					<xs:annotation>
						<xs:documentation>class=CVmDirCommonLockedOperations;single_fixed=on;</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="LockedOperation" type="xs:integer" default="QList&lt;PRL_ALLOWED_VM_COMMAND&gt;()" minOccurs="0" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>type=PRL_ALLOWED_VM_COMMAND;method=LockedOperations;</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="VmDirectory" type="VmDirectoryType" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="schemaVersion" type="xs:decimal" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="RegisteredBy" type="xs:string"/>
	<xs:element name="RegistrationDateTime" type="xs:dateTime">
		<xs:annotation>
			<xs:documentation>method=RegDateTime;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="ServerIdentificationType">
		<xs:annotation>
			<xs:documentation>class=CVmServerIdentification;</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="ServerUuid"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="ServerUuid" type="xs:string">
		<xs:annotation>
			<xs:documentation>default=Uuid::createUuid().toString();</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="UserFriendlyName" type="xs:string"/>
	<xs:complexType name="VirtualMachineType">
		<xs:annotation>
			<xs:documentation>class=CVmDirectoryItem;</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Uuid" type="xs:string">
				<xs:annotation>
					<xs:documentation>method=VmUuid;default=Uuid::createUuid().toString();attribute=uuid;</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="IsRegistered"/>
			<xs:element ref="IsValid"/>
			<xs:element ref="VmHome"/>
			<xs:element name="VmName" type="xs:string" minOccurs="0"/>
			<xs:element ref="IsPrivate"/>
			<xs:element ref="RegisteredBy"/>
			<xs:element ref="RegistrationDateTime"/>
			<xs:element ref="ChangedBy"/>
			<xs:element ref="ChangeDateTime"/>
			<xs:element name="LastRunningState" type="xs:boolean" minOccurs="0"/>
			<xs:element name="LockedOperationsList">
				<xs:annotation>
					<xs:documentation>class=CVmDirLockedOperationsList;single_fixed=on;</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="LockedOperation" type="xs:integer" default="QList&lt;PRL_ALLOWED_VM_COMMAND&gt;()" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>type=PRL_ALLOWED_VM_COMMAND;method=LockedOperations;</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="LockDown">
				<xs:annotation>
					<xs:documentation>single_fixed=on;class=CVmDirLockDown;</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Hash1" type="xs:string">
							<xs:annotation>
								<xs:documentation>method=EditingPasswordHash;</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="LockedSign" type="xs:boolean" default="false" minOccurs="0"/>
			<xs:element name="VmConfigCheckSum" type="xs:string" minOccurs="0"/>
			<xs:element name="CtId" type="xs:string" minOccurs="0"/>
			<xs:element name="VmType" type="xs:integer" default="PVT_VM" minOccurs="0">
				<xs:annotation>
					<xs:documentation>type=PRL_VM_TYPE;no_save=on;</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Template" type="xs:boolean" default="false" minOccurs="0">
				<xs:annotation>
					<xs:documentation>no_save=on;</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="VmDirectoryType">
		<xs:annotation>
			<xs:documentation>class=CVmDirectory;</xs:documentation>
			<xs:documentation source="Constructor">header_fragment:
	CVmDirectory(const Uuid&amp; uuid, const QString&amp; defaultVmFolder,
		const QString&amp; userFriendlyName);
</xs:documentation>
			<xs:documentation source="Constructor_impl">unit_fragment:
CVmDirectory::CVmDirectory(const Uuid&amp; uuid, const QString&amp; defaultVmFolder,
				 const QString&amp; userFriendlyName)
{
	cleanupClassProperties();
	
	setUuid( uuid.toString() );
	setDefaultVmFolder( defaultVmFolder );
	setUserFriendlyName( userFriendlyName );
}
</xs:documentation>
			<xs:documentation source="TemporaryCatalogue">header_fragment:
   struct TemporaryCatalogueItem
   {  TemporaryCatalogueItem(const QString&amp; vmUuid, const QString&amp; vmXmlPath, const QString&amp; vmName);
      QString m_sItemId;
      QString vmUuid;
      QString vmXmlPath;
      QString vmName;
   };
   typedef QList&lt;TemporaryCatalogueItem &gt; CTemporaryCatalogue;

   CTemporaryCatalogue*  getTemporaryCatalogue();
private:
   CTemporaryCatalogue  m_temporaryCatalogue;
public:
</xs:documentation>
			<xs:documentation source="VmDirectoryItem_impl">include=&lt;Libraries/PrlUuid/Uuid.h&gt;</xs:documentation>
			<xs:documentation source="TemporaryCatalogue_impl">unit_fragment:
CVmDirectory::CTemporaryCatalogue* CVmDirectory::getTemporaryCatalogue()
{
   return &amp;m_temporaryCatalogue;
}

CVmDirectory::TemporaryCatalogueItem::TemporaryCatalogueItem(const QString&amp; vmUuid, const QString&amp; vmXmlPath, const QString&amp; vmName)
: m_sItemId( Uuid::createUuid().toString() ),
  vmUuid(vmUuid),vmXmlPath(vmXmlPath),vmName(vmName)
{
}

</xs:documentation>
			<xs:documentation source="VmDirectoryItem">header_fragment:
	// Add VM directory item to the list
	void addVmDirectoryItem(CVmDirectoryItem* item); 
</xs:documentation>
			<xs:documentation source="VmDirectoryItem_impl">unit_fragment:
void CVmDirectory::addVmDirectoryItem(CVmDirectoryItem* item)
{
	m_lstVmDirectoryItems.append( item );
}
</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Uuid" type="xs:string">
				<xs:annotation>
					<xs:documentation>method=Uuid;default=Uuid::createUuid().toString();attribute=uuid;</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="DefaultVmFolder"/>
			<xs:element ref="UserFriendlyName"/>
			<xs:element name="VirtualMachine" type="VirtualMachineType" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>list=VmDirectoryItems;</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="VmHome" type="xs:string"/>
</xs:schema>
