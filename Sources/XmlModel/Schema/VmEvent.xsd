<?xml version="1.0" encoding="UTF-8"?>
<!--W3C Schema generated by XMLSPY v5 rel. 4 U (http://www.xmlspy.com)-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
	<xs:element name="Data" type="xs:base64Binary">
		<xs:annotation>
			<xs:documentation source="Tag condition">condition:getParamType() == PVE::CData || getParamType() == PVE::VmConfiguration</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="EventCode" type="xs:int" default="PRL_ERR_SUCCESS">
		<xs:annotation>
			<xs:documentation>type=PRL_RESULT;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="EventInitialRequestId" type="xs:string">
		<xs:annotation>
			<xs:documentation>method=InitRequestId;default=Uuid::createUuid().toString();</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="EventIssuerId" type="xs:string">
		<xs:annotation>
			<xs:documentation>default=Uuid::createUuid().toString();</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="EventIssuerType" type="xs:integer" default="PIE_VIRTUAL_MACHINE">
		<xs:annotation>
			<xs:documentation>type=PRL_EVENT_ISSUER_TYPE;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="EventLevel" type="xs:integer" default="PVE::EventLevel0">
		<xs:annotation>
			<xs:documentation>type=PVE::VmEventLevel;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="EventNeedResponse" type="xs:integer" default="PVE::EventRespNotRequired">
		<xs:annotation>
			<xs:documentation>method=RespRequired;type=PVE::VmEventRespOption;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="EventParameterType">
		<xs:annotation>
			<xs:documentation>class=CVmEventParameter;base_class=-CBaseNode;base_class=-CPrlDataSerializer;</xs:documentation>
			<xs:documentation source="Constructor">header_fragment:
	CVmEventParameter(PVE::ParamFieldDataType param_type, QString param_value, QString param_name = "");
</xs:documentation>
			<xs:documentation source="Constructor_impl">unit_fragment:
CVmEventParameter::CVmEventParameter(PVE::ParamFieldDataType param_type, 
	QString param_value, QString param_name)
{
	cleanupClassProperties();

//	if( isCorrectParamType( param_type ) )
		setParamType( param_type );
//	else
//		m_uiType = PVE::String;
	
	m_qsName = param_name;

	if( getParamType() == PVE::CData )
		m_baData = param_value.toUtf8();
    else if (!m_lstValues.isEmpty())
    {
           setParamValue(param_value);
    }
}
</xs:documentation>
			<xs:documentation source="isList">header_fragment:
	virtual bool isList() const
	{
		return isIsList();
	}
</xs:documentation>
			<xs:documentation source="isListParameter">header_fragment:
	static bool isListParameter(QDomElement *xmlItemElement);
</xs:documentation>
			<xs:documentation source="isListParameter_impl">unit_fragment:
bool CVmEventParameter::isListParameter(QDomElement *xmlItemElement)
{
	QDomElement xmlParamListSignElem = xmlItemElement->firstChildElement(XML_VM_ND_IS_LIST);
	return (!xmlParamListSignElem.isNull());
}
</xs:documentation>
			<xs:documentation source="Vector type">post_class_info:
typedef std::vector&lt; CVmEventParameter* &gt; VmEventParamVector;</xs:documentation>
			<xs:documentation source="Cdata">header_fragment:
    void setCdata(QString value) { setData(value.toUtf8()); }
    QString getCdata() { return UTF8_2QSTR(getData().data()); }
</xs:documentation>
			<xs:documentation source="getValuesList">header_fragment:
    QStringList getValuesList();
</xs:documentation>
			<xs:documentation source="getValuesList_impl">unit_fragment:
QStringList CVmEventParameter::getValuesList()
{
    if ( isList() &amp;&amp; !m_lstValues.isEmpty() )
    {
        return m_lstValues[0]-&gt;getListItem();
    }
    return QStringList();
}
</xs:documentation>
			<xs:documentation source="EventParameterClassType">header_fragment:
    enum EventParameterClassType
    {
        BaseType = 0,
        List,
        Binary
    };

    EventParameterClassType getEventParameterClassType() const;
    void setEventParameterClassType(EventParameterClassType type);
protected:
    EventParameterClassType m_uiEventParameterClassType;
public:
</xs:documentation>
			<xs:documentation source="EventParameterClassType_impl">unit_fragment:
CVmEventParameter::EventParameterClassType CVmEventParameter::getEventParameterClassType() const
{
	return (m_uiEventParameterClassType);
}

void CVmEventParameter::setEventParameterClassType(EventParameterClassType type)
{
    m_uiEventParameterClassType = type;
}
</xs:documentation>
			<xs:documentation source="CustomInit">header_fragment:
    virtual void CustomInit();
</xs:documentation>
			<xs:documentation source="CustomInit_impl">unit_fragment:
void CVmEventParameter::CustomInit()
{
    m_uiEventParameterClassType = BaseType;
}
</xs:documentation>
			<xs:documentation source="CustomCopy">header_fragment:
    virtual void CustomCopy(const CBaseNode* pBN);</xs:documentation>
			<xs:documentation source="CustomCopy_impl">unit_fragment:
void CVmEventParameter::CustomCopy(const CBaseNode* pBN)
{
    if ( ! pBN ) return;

    setEventParameterClassType( ((CVmEventParameter* )pBN)-&gt;getEventParameterClassType() );
}</xs:documentation>
			<xs:documentation source="SerDeser">header_fragment:
public:
	virtual void Serialize(QDataStream &amp;_stream);
	virtual void Deserialize(QDataStream &amp;_stream);
</xs:documentation>
			<xs:documentation source="SerDeser_impl">unit_fragment:
void CVmEventParameter::Serialize(QDataStream &amp;_stream)
{
    PrlOpaqueSerializer((quint32 &amp;)PrlOpaqueTypeConverter(m_uiEventParameterClassType)).Serialize(_stream);
    PrlOpaqueSerializer((quint32 &amp;)PrlOpaqueTypeConverter(m_ctType)).Serialize(_stream);
    
    QString strParamValue = getParamValue();
    CPrlStringDataSerializer(strParamValue).Serialize(_stream);
    CPrlStringDataSerializer(m_qsName).Serialize(_stream);
    
    QString strCData = getCdata();
    CPrlStringDataSerializer(strCData).Serialize(_stream);
}

void CVmEventParameter::Deserialize(QDataStream &amp;_stream)
{
    cleanupClassProperties();
    PrlOpaqueSerializer((quint32 &amp;)PrlOpaqueTypeConverter(m_ctType)).Deserialize(_stream);
    QString strParamValue;
    CPrlStringDataSerializer(strParamValue).Deserialize(_stream);
    setParamValue(strParamValue);
    CPrlStringDataSerializer(m_qsName).Deserialize(_stream);
    QString strCData;
    CPrlStringDataSerializer(strCData).Deserialize(_stream);
    setCdata(strCData);
}
</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="IsList" minOccurs="0"/>
			<xs:element ref="Name"/>
			<xs:element ref="Type"/>
			<xs:element name="Value" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>method=ParamValue;</xs:documentation>
					<xs:documentation source="Tag condition">condition:!isList()</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Value" type="ValueType">
				<xs:annotation>
					<xs:documentation>list=Values;single_fixed=on;</xs:documentation>
					<xs:documentation source="Tag condition">condition:isList()</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="Data" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="EventParametersType">
		<xs:annotation>
			<xs:documentation>class=CVmEventParameters;</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="EventParameter" type="EventParameterType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="EventSource" type="xs:string"/>
	<xs:element name="EventType" type="xs:integer" default="PET_VM_INF_UNINITIALIZED_EVENT_CODE">
		<xs:annotation>
			<xs:documentation>type=PRL_EVENT_TYPE;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="IsList" type="xs:boolean">
		<xs:annotation>
			<xs:documentation source="Tag condition">condition:isList()</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="ListItem" type="xs:string"/>
	<xs:element name="Name" type="xs:string">
		<xs:annotation>
			<xs:documentation>method=ParamName</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="ParallelsEvent">
		<xs:annotation>
			<xs:documentation>class=CVmEventBase;base_class=-CBaseNode;base_class=-CPrlDataSerializer;</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="EventType"/>
				<xs:element ref="EventLevel"/>
				<xs:element ref="EventCode"/>
				<xs:element ref="EventNeedResponse"/>
				<xs:element ref="EventIssuerType"/>
				<xs:element ref="EventIssuerId"/>
				<xs:element ref="EventSource"/>
				<xs:element ref="EventInitialRequestId"/>
				<xs:element name="EventParameters" type="EventParametersType">
					<xs:annotation>
						<xs:documentation>list=BaseEventParameters;single_fixed=on;</xs:documentation>
						<xs:documentation>list=BaseEventParameters;</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="EventId" type="xs:unsignedLong" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="schemaVersion" type="xs:decimal" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="Type" type="xs:integer" default="PVE::String">
		<xs:annotation>
			<xs:documentation>method=ParamType;type=PVE::ParamFieldDataType;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="ValueType">
		<xs:annotation>
			<xs:documentation>class=CVmEventValue;</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="ListItem" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
