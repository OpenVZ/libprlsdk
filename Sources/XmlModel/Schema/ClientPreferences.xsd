<?xml version="1.0" encoding="UTF-8"?>
<!--W3C Schema generated by XMLSPY v5 rel. 4 U (http://www.xmlspy.com)-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
	<xs:complexType name="AccessPreferencesType">
		<xs:sequence>
			<xs:element name="UseManagementConsole" type="xs:boolean"/>
			<xs:element name="ChangeServerSettings" type="xs:boolean"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="AllowUseServerManagementConsole" type="xs:boolean"/>
	<xs:complexType name="CommonPreferencesType">
		<xs:sequence>
			<xs:element name="WorkspacePreferences" type="WorkspacePreferencesType"/>
			<xs:element name="MemoryPreferences" type="MemoryPreferencesType"/>
			<xs:element name="NetworkPreferences">
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="NetworkPreferencesType">
							<xs:sequence>
								<xs:element name="DhcpScope" maxOccurs="2">
									<xs:complexType>
										<xs:sequence>
											<xs:element name="Enabled" type="xs:boolean"/>
											<xs:element name="NetworkType" type="xs:integer"/>
											<xs:element ref="DhcpScopeStartAddress"/>
											<xs:element ref="DhcpScopeEndAddress"/>
											<xs:element ref="DhcpScopeMask"/>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
							</xs:sequence>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="CompressionLevel" type="xs:integer"/>
	<xs:complexType name="ConnectionPropertiesType">
		<xs:sequence>
			<xs:element ref="UseSSL"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="DefaultCommandHistorySize" type="xs:integer"/>
	<xs:element name="DefaultVmCatalogue" type="xs:string"/>
	<xs:element name="DefaultVmDirectory" type="xs:string"/>
	<xs:element name="DhcpScopeEndAddress" type="xs:string"/>
	<xs:element name="DhcpScopeMask" type="xs:string"/>
	<xs:element name="DhcpScopeStartAddress" type="xs:string"/>
	<xs:element name="HkAction" type="xs:integer" default="PVE::SwitchFullScreenMode">
		<xs:annotation>
			<xs:documentation>method=HotkeyAction;type=PVE::HotkeyActionCode;attribute=action;default=m_defaultAction;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="HkCustomKey" type="xs:integer" default="XML_DEFAULT_PARAM_UINT">
		<xs:annotation>
			<xs:documentation>method=SkipCK;</xs:documentation>
			<xs:documentation source="Tag condition">condition:false</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="HkUseAlt" type="xs:integer" default="PVE::HotkeyUseAltEnabled">
		<xs:annotation>
			<xs:documentation>method=UseAlt;default=getUseAltDefault();type=PVE::HotkeyUseAltOption;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="HkUseCtrl" type="xs:integer" default="PVE::HotkeyUseCtrlEnabled">
		<xs:annotation>
			<xs:documentation>method=UseCtrl;default=getUseCtrlDefault();type=PVE::HotkeyUseCtrlOption;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="HkUseCustom" type="xs:integer" default="PVE::HotkeyUseCustomDisabled">
		<xs:annotation>
			<xs:documentation>method=UseCustom;default=getUseCustomDefault();type=PVE::HotkeyUseCustomOption;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="HkUseShift" type="xs:integer" default="PVE::HotkeyUseShiftDisabled">
		<xs:annotation>
			<xs:documentation>method=UseShift;default=getUseShiftDefault();type=PVE::HotkeyUseShiftOption;</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="HostRamSize" type="xs:integer"/>
	<xs:complexType name="HotkeyCombinationType">
		<xs:annotation>
			<xs:documentation>class=CHotkeyCombination</xs:documentation>
			<xs:documentation source="Constructor">header_fragment:
	// Initializing constructor
	CHotkeyCombination( PVE::HotkeyActionCode hotkey_action, 
		PVE::HotkeyUseAltOption use_alt, PVE::HotkeyUseCtrlOption use_ctrl, 
		PVE::HotkeyUseShiftOption use_shift = PVE::HotkeyUseShiftDisabled, 
		PVE::HotkeyUseCustomOption use_custom = PVE::HotkeyUseCustomDisabled, 
		unsigned int custom_key = 0);
</xs:documentation>
			<xs:documentation source="Constructor_impl">unit_fragment:
CHotkeyCombination::CHotkeyCombination( PVE::HotkeyActionCode hotkey_action,
	PVE::HotkeyUseAltOption use_alt, PVE::HotkeyUseCtrlOption use_ctrl, 
	PVE::HotkeyUseShiftOption use_shift, PVE::HotkeyUseCustomOption use_custom, 
	unsigned int custom_key)
{
    InitLists();
	m_ctHkAction = hotkey_action;
	m_ctHkUseAlt = use_alt;
	m_ctHkUseCtrl = use_ctrl;
	m_ctHkUseShift = use_shift;
	m_ctHkUseCustom = use_custom;
	m_uiHkCustomKeyNew = custom_key;
}
</xs:documentation>
			<xs:documentation source="Default action">header_fragment:
    void setDefaultAction(PVE::HotkeyActionCode act)
    {
        m_defaultAction = act;
    }
protected:
    PVE::HotkeyActionCode m_defaultAction;
public:
</xs:documentation>
			<xs:documentation source="CustomInit">header_fragment:
    virtual void CustomInit()
    {
        m_defaultAction = PVE::SwitchFullScreenMode;
    }
</xs:documentation>
			<xs:documentation source="CustomCopy">header_fragment:
    virtual void CustomCopy(const CBaseNode* pBN) { if (pBN) m_defaultAction = ((CHotkeyCombination* )pBN)-&gt;m_defaultAction; }</xs:documentation>
			<xs:documentation source="getUseAltDefault">header_fragment:
    PVE::HotkeyUseAltOption getUseAltDefault() const;
</xs:documentation>
			<xs:documentation source="getUseAltDefault_impl">unit_fragment:
PVE::HotkeyUseAltOption CHotkeyCombination::getUseAltDefault() const
{
	switch ( m_ctHkAction )
	{
	case PVE::ReleaseKeyboardInput:
		return PVE::HotkeyUseAltEnabled;
	case PVE::SwitchFullScreenMode:
		return PVE::HotkeyUseAltEnabled;
	case PVE::ToggleCoherence:
		return PVE::HotkeyUseAltEnabled;
	case PVE::MouseRightClick:
		return PVE::HotkeyUseAltDisabled;
	case PVE::Modality:
		return PVE::HotkeyUseAltEnabled;
	case PVE::Crystal:
		return PVE::HotkeyUseAltEnabled;
	case PVE::ShowHideApplication:
		return PVE::HotkeyUseAltDisabled;
	default:;}
    return PVE::HotkeyUseAltEnabled;
}
</xs:documentation>
			<xs:documentation source="getUseCtrlDefault">header_fragment:
    PVE::HotkeyUseCtrlOption getUseCtrlDefault() const;
</xs:documentation>
			<xs:documentation source="getUseCtrlDefault_impl">unit_fragment:
PVE::HotkeyUseCtrlOption CHotkeyCombination::getUseCtrlDefault() const
{
	switch ( m_ctHkAction )
	{
	case PVE::ReleaseKeyboardInput:
		return PVE::HotkeyUseCtrlEnabled;
	case PVE::SwitchFullScreenMode:
		return PVE::HotkeyUseCtrlDisabled;
	case PVE::ToggleCoherence:
		return PVE::HotkeyUseCtrlEnabled;
	case PVE::MouseRightClick:
		return PVE::HotkeyUseCtrlEnabled;
	case PVE::Modality:
		return PVE::HotkeyUseCtrlEnabled;
	case PVE::Crystal:
		return PVE::HotkeyUseCtrlEnabled;
	case PVE::ShowHideApplication:
		return PVE::HotkeyUseCtrlDisabled;
	default:;}
    return PVE::HotkeyUseCtrlEnabled;
}
</xs:documentation>
			<xs:documentation source="getUseShiftDefault">header_fragment:
    PVE::HotkeyUseShiftOption getUseShiftDefault() const;
</xs:documentation>
			<xs:documentation source="getUseShiftDefault_impl">unit_fragment:
PVE::HotkeyUseShiftOption CHotkeyCombination::getUseShiftDefault() const
{
	switch ( m_ctHkAction )
	{
	case PVE::ReleaseKeyboardInput:
		return PVE::HotkeyUseShiftDisabled;
	case PVE::SwitchFullScreenMode:
		return PVE::HotkeyUseShiftDisabled;
	case PVE::ToggleCoherence:
		return PVE::HotkeyUseShiftEnabled;
	case PVE::MouseRightClick:
		return PVE::HotkeyUseShiftEnabled;
	case PVE::Modality:
		return PVE::HotkeyUseShiftDisabled;
	case PVE::Crystal:
		return PVE::HotkeyUseShiftDisabled;
	case PVE::ShowHideApplication:
		return PVE::HotkeyUseShiftDisabled;
	default:;}
    return PVE::HotkeyUseShiftDisabled;
}
</xs:documentation>
			<xs:documentation source="getUseCustomDefault">header_fragment:
    PVE::HotkeyUseCustomOption getUseCustomDefault() const;</xs:documentation>
			<xs:documentation source="getUseCustomDefault_impl">unit_fragment:
PVE::HotkeyUseCustomOption CHotkeyCombination::getUseCustomDefault() const
{
	switch ( m_ctHkAction )
	{
	case PVE::ReleaseKeyboardInput:
		return PVE::HotkeyUseCustomDisabled;
	case PVE::SwitchFullScreenMode:
		return PVE::HotkeyUseCustomEnabled;
	case PVE::ToggleCoherence:
		return PVE::HotkeyUseCustomDisabled;
	case PVE::MouseRightClick:
		return PVE::HotkeyUseCustomDisabled;
	case PVE::Modality:
		return PVE::HotkeyUseCustomEnabled;
	case PVE::Crystal:
		return PVE::HotkeyUseCustomDisabled;
	case PVE::ShowHideApplication:
		return PVE::HotkeyUseCustomDisabled;
	default:;}
    return PVE::HotkeyUseCustomDisabled;
}
</xs:documentation>
			<xs:documentation source="getCustomKeyDefault">header_fragment:
    unsigned int getCustomKeyDefault() const;
</xs:documentation>
			<xs:documentation source="getCustomKeyDefault_impl">unit_fragment:
unsigned int CHotkeyCombination::getCustomKeyDefault() const
{
    switch ( m_ctHkAction )
    {
     case PVE::SwitchFullScreenMode:
     case PVE::Crystal:
        return Qt::Key_Return;
    default:;}
    return XML_DEFAULT_PARAM_UINT;
}
</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="HkAction"/>
			<xs:element ref="HkUseAlt"/>
			<xs:element ref="HkUseCtrl"/>
			<xs:element ref="HkUseShift"/>
			<xs:element ref="HkUseCustom"/>
			<xs:element name="HkCustomKeyNew" type="xs:integer" default="XML_DEFAULT_PARAM_UINT" minOccurs="0">
				<xs:annotation>
					<xs:documentation>method=CustomKey;default=getCustomKeyDefault();</xs:documentation>
					<xs:documentation source="Tag condition">condition:m_ctHkAction != PVE::MouseRightClick &amp;&amp; m_ctHkUseCustom &amp;&amp; !IS_DEFAULT_PARAM_UINT( m_uiHkCustomKeyNew )</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="HotkeysType">
		<xs:sequence>
			<xs:element name="HotkeyCombination" type="HotkeyCombinationType" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="IoServerConnectorPort" type="xs:integer"/>
	<xs:element name="MaxVmMemory" type="xs:integer"/>
	<xs:complexType name="MemoryPreferencesType">
		<xs:sequence>
			<xs:element name="AdjustMemoryAutomatically" type="xs:boolean"/>
			<xs:element ref="ReservedMemoryLimit"/>
			<xs:element ref="ReservedMemoryMax"/>
			<xs:element ref="MinVmMemory"/>
			<xs:element ref="MaxVmMemory"/>
			<xs:element ref="RecommendedMaxVmMemory"/>
			<xs:element ref="HostRamSize"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="MinVmMemory" type="xs:integer"/>
	<xs:element name="Name" type="xs:string"/>
	<xs:complexType name="NetworkPreferencesType"/>
	<xs:element name="ParallelsClientPreferences">
		<xs:annotation>
			<xs:documentation>class=CClientPreferences</xs:documentation>
			<xs:documentation source="Init constructor">header_fragment:
    CClientPreferences(QString s) { InitLists(); fromString(s); }</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="MainWindow">
					<xs:annotation>
						<xs:documentation>class=CMainWindowPreferences;method=MainWindowPreferences;single_fixed=on;</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ToolbarPlacement" type="xs:integer" default="PVE::ToolbarDockedTop">
								<xs:annotation>
									<xs:documentation>type=PVE::ToolbarPlacement;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="ShowToolbar" type="xs:boolean" default="true"/>
							<xs:element name="SideBarPlacement" type="xs:integer" default="PVE::SideBarLeft" minOccurs="0">
								<xs:annotation>
									<xs:documentation>type=PVE::SideBarPlacement;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="ShowSideBar" type="xs:boolean" default="true" minOccurs="0"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="Actions">
					<xs:annotation>
						<xs:documentation>class=CActionsPreferences;method=ActionsPreferences;single_fixed=on;</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="OnAppQuit" type="xs:integer" default="PVE::OnAppQuitAskMe">
								<xs:annotation>
									<xs:documentation>type=PVE::VmOnAppQuit;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="OnStop" type="xs:integer" default="PVE::OnStopStop">
								<xs:annotation>
									<xs:documentation>type=PVE::VmOnStop;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="OnPause" type="xs:integer" default="PVE::OnPausePause">
								<xs:annotation>
									<xs:documentation>type=PVE::VmOnPause;</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="Presentation">
					<xs:annotation>
						<xs:documentation>class=CPresentationPreferences;method=PresentationPreferences;single_fixed=on;</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="FullScreenTransition" type="xs:integer" default="PVE::AnimationDisabled">
								<xs:annotation>
									<xs:documentation>type=PVE::SwitchAnimationMode;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="OsWindowTransition" type="xs:integer" default="PVE::AnimationDisabled">
								<xs:annotation>
									<xs:documentation>type=PVE::SwitchAnimationMode;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="AnimationSpeed" type="xs:integer" default="XML_DEFAULT_ANIMATION_SPEED_MIN"/>
							<xs:element name="AnimateCoherence" type="xs:boolean"/>
							<xs:element name="AnimateSuspendAndResume" type="xs:boolean"/>
							<xs:element name="HiddenMessages">
								<xs:annotation>
									<xs:documentation>single_fixed=on;</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:element name="MessageId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="Keyboard">
					<xs:annotation>
						<xs:documentation>class=CKeyboardPreferences;method=KeyboardPreferences;single_fixed=on;</xs:documentation>
						<xs:documentation source="Hotkey">header_fragment:
	// Get fullscreen switch hotkey
	CHotkeyCombination* getHotkeySwitchFullscreen() const;
	// Get release input hotkey
	CHotkeyCombination* getHotkeyReleaseInput() const;
	// Get toggle coherence hotkey
	CHotkeyCombination* getHotkeyToggleCoherence() const;
	// Get mouse right click hotkey
	CHotkeyCombination* getHotkeyMouseRightClick() const;
	// Get modality hotkey
	CHotkeyCombination* getHotkeyModality() const;
	// Get crystal hotkey
	CHotkeyCombination* getHotkeyCrystal() const;
	// Get grab input hotkey
	CHotkeyCombination* getHotkeyGrabInput() const;
</xs:documentation>
						<xs:documentation source="Hotkey_impl">unit_fragment:
CHotkeyCombination* CKeyboardPreferences::getHotkeySwitchFullscreen() const
{
    return m_lstHotkeyCombination[0];
}

CHotkeyCombination* CKeyboardPreferences::getHotkeyReleaseInput() const
{
    return m_lstHotkeyCombination[1];
}

CHotkeyCombination* CKeyboardPreferences::getHotkeyToggleCoherence() const
{
    return m_lstHotkeyCombination[2];
}

CHotkeyCombination* CKeyboardPreferences::getHotkeyMouseRightClick() const
{
    return m_lstHotkeyCombination[3];
}

CHotkeyCombination* CKeyboardPreferences::getHotkeyModality() const
{
    return m_lstHotkeyCombination[4];
}

CHotkeyCombination* CKeyboardPreferences::getHotkeyCrystal() const
{
    return m_lstHotkeyCombination[5];
}
CHotkeyCombination* CKeyboardPreferences::getHotkeyGrabInput() const
{
    return m_lstHotkeyCombination[6];
}
</xs:documentation>
						<xs:documentation source="HotkeyByActionCode">header_fragment:
	CHotkeyCombination* getHotkeyByActionCode( PVE::HotkeyActionCode value )  const;
</xs:documentation>
						<xs:documentation source="HotkeyByActionCode_impl">unit_fragment:
CHotkeyCombination* CKeyboardPreferences::getHotkeyByActionCode( 
	PVE::HotkeyActionCode value )  const
{
	switch ( value )
	{
	case PVE::SwitchFullScreenMode:
		return getHotkeySwitchFullscreen();
	case PVE::ReleaseKeyboardInput:
		return getHotkeyReleaseInput();
	case PVE::ToggleCoherence:
		return getHotkeyToggleCoherence();
	case PVE::MouseRightClick:
		return getHotkeyMouseRightClick();
	case PVE::Modality:
		return getHotkeyModality();
	case PVE::Crystal:
		return getHotkeyModality();
	case PVE::ShowHideApplication:
		return 0;
	case PVE::GrabInput:
		return getHotkeyGrabInput();

}
	return NULL;
}
</xs:documentation>
						<xs:documentation source="CustomInit">header_fragment:
    virtual void CustomInit();</xs:documentation>
						<xs:documentation source="CustomInit_impl">unit_fragment:
void CKeyboardPreferences::CustomInit()
{
    if (m_lstHotkeyCombination.size() &gt;= 1)
    {
        m_lstHotkeyCombination[0]-&gt;setDefaultAction(PVE::SwitchFullScreenMode);
    }
    if (m_lstHotkeyCombination.size() &gt;= 2)
    {
        m_lstHotkeyCombination[1]-&gt;setDefaultAction(PVE::ReleaseKeyboardInput);
    }
    if (m_lstHotkeyCombination.size() &gt;= 3)
    {
        m_lstHotkeyCombination[2]-&gt;setDefaultAction(PVE::ToggleCoherence);
    }
    if (m_lstHotkeyCombination.size() &gt;= 4)
    {
        m_lstHotkeyCombination[3]-&gt;setDefaultAction(PVE::MouseRightClick);
    }
    if (m_lstHotkeyCombination.size() &gt;= 5)
    {
        m_lstHotkeyCombination[4]-&gt;setDefaultAction(PVE::Modality);
    }
    if (m_lstHotkeyCombination.size() &gt;= 6)
    {
        m_lstHotkeyCombination[5]-&gt;setDefaultAction(PVE::Crystal);
    }
    if (m_lstHotkeyCombination.size() &gt;= 7)
    {
        m_lstHotkeyCombination[6]-&gt;setDefaultAction(PVE::GrabInput);
    }
    for(int i = 0; i &lt; m_lstHotkeyCombination.size(); i++)
    {
        m_lstHotkeyCombination[i]-&gt;setDefaults();
    }
}
</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="HotkeyCombination" type="HotkeyCombinationType" minOccurs="4" maxOccurs="4">
								<xs:annotation>
									<xs:documentation>single_fixed=on;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="MouseRightClickDelayedNew" type="xs:boolean" minOccurs="0">
								<xs:annotation>
									<xs:documentation>method=MouseRightClickDelayed;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="MouseRightClickDelayRateNew" type="xs:integer" default="XML_DEFAULT_MOUSE_RIGHTCLICK_DELAY_MAX" minOccurs="0">
								<xs:annotation>
									<xs:documentation>method=MouseRightClickDelayRate;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="CommandKeysRemap" type="xs:integer" default="PVE::RemapDoNothing">
								<xs:annotation>
									<xs:documentation>method=RemapOption;type=PVE::CommandKeysRemapOption;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="TranslateNumEnterToAltGr" type="xs:boolean">
								<xs:annotation>
									<xs:documentation>method=NumEnterToAltGr;</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="SharedWeb">
					<xs:annotation>
						<xs:documentation>class=CSharedWebPreferences;method=SharedWebPreferences;single_fixed=on;</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Web" type="xs:integer" default="PVE::OpenByDefault">
								<xs:annotation>
									<xs:documentation>method=WebAppMode;type=PVE::SharedWebMode;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="Mail" type="xs:integer" default="PVE::OpenByDefault">
								<xs:annotation>
									<xs:documentation>method=MailAppMode;type=PVE::SharedWebMode;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="Ftp" type="xs:integer" default="PVE::OpenByDefault">
								<xs:annotation>
									<xs:documentation>method=FtpAppMode;type=PVE::SharedWebMode;</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="Update">
					<xs:annotation>
						<xs:documentation>class=CUpdatePreferences;method=UpdatePreferences;single_fixed=on;</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="UpdatePeriod" type="xs:integer" default="1"/>
							<xs:element name="DateTime" type="xs:dateTime">
								<xs:annotation>
									<xs:documentation>method=LastCheckUpdateDateTime;</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="UpdateEnabled" type="xs:boolean" minOccurs="0"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="schemaVersion" type="xs:decimal" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="ParallelsUserType">
		<xs:sequence/>
	</xs:complexType>
	<xs:element name="RecommendedMaxVmMemory" type="xs:integer"/>
	<xs:element name="ReservedMemoryLimit" type="xs:integer"/>
	<xs:element name="ReservedMemoryMax" type="xs:integer"/>
	<xs:complexType name="ServerIdentificationType">
		<xs:sequence>
			<xs:element ref="ServerUuid"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ServerSettingsType">
		<xs:sequence>
			<xs:element name="UsersPreferences" type="UsersPreferencesType"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="ServerUuid" type="xs:string"/>
	<xs:element name="UseSSL" type="xs:boolean"/>
	<xs:element name="UserVmCatalogue" type="xs:string"/>
	<xs:element name="UserVmDirectory" type="xs:string"/>
	<xs:complexType name="UserWorkspaceType">
		<xs:sequence>
			<xs:element ref="UserVmDirectory"/>
			<xs:element name="UserVmList" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="UsersPreferencesType">
		<xs:sequence/>
	</xs:complexType>
	<xs:element name="Uuid" type="xs:string"/>
	<xs:element name="VmConnectorPort" type="xs:integer"/>
	<xs:element name="WebServicesConnectorPort" type="xs:integer"/>
	<xs:complexType name="WorkspacePreferencesType">
		<xs:sequence>
			<xs:element ref="DefaultVmDirectory"/>
			<xs:element name="DefaultVmList" type="xs:string"/>
			<xs:element name="DistributedDirectory" type="xs:boolean"/>
			<xs:element name="DefaultUseConsole" type="xs:boolean"/>
			<xs:element name="DefaultChangeSettings" type="xs:boolean"/>
			<xs:element ref="VmConnectorPort"/>
			<xs:element ref="WebServicesConnectorPort"/>
			<xs:element ref="IoServerConnectorPort"/>
			<xs:element ref="DefaultCommandHistorySize"/>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
